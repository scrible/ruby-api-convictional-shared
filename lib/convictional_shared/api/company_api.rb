=begin
#Shared API

#Convictional is the first B2B trade enablement network. This API allows developers to build on our seller and buyer capabilities. This API is unstable, meaning the endpoints could be added, updated or removed without notice. We intend to make backwards incompatible changes in the future, and will make best efforts to notify you in the event of your usage of impacted endpoints. If you plan to build on this API, please contact us for recommendations via support@convictional.com.

The version of the OpenAPI document: v2021-01-01
Contact: support@convictional.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module ConvictionalShared
  class CompanyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete SFTP credentials
    # An endpoint for deleting SFTP credentials.
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param username [String] Username associated with the SFTP credentials to be deleted
    # @param [Hash] opts the optional parameters
    # @return [SFTPUserDeleteSuccess]
    def delete_sftp_user_by_username(authorization, username, opts = {})
      data, _status_code, _headers = delete_sftp_user_by_username_with_http_info(authorization, username, opts)
      data
    end

    # Delete SFTP credentials
    # An endpoint for deleting SFTP credentials.
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param username [String] Username associated with the SFTP credentials to be deleted
    # @param [Hash] opts the optional parameters
    # @return [Array<(SFTPUserDeleteSuccess, Integer, Hash)>] SFTPUserDeleteSuccess data, response status code and response headers
    def delete_sftp_user_by_username_with_http_info(authorization, username, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CompanyApi.delete_sftp_user_by_username ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CompanyApi.delete_sftp_user_by_username"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling CompanyApi.delete_sftp_user_by_username"
      end
      # resource path
      local_var_path = '/sftp/{username}'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SFTPUserDeleteSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CompanyApi.delete_sftp_user_by_username",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#delete_sftp_user_by_username\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update SFTP credentials
    # An endpoint for updating an SFTP user's password.
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param username [String] Username associated with the SFTP credentials to be updated
    # @param sftp_user_update [SFTPUserUpdate] New password for updating SFTP credentials.
    # @param [Hash] opts the optional parameters
    # @return [SFTPUserUpdateSuccess]
    def patch_sftp_user_by_username(authorization, username, sftp_user_update, opts = {})
      data, _status_code, _headers = patch_sftp_user_by_username_with_http_info(authorization, username, sftp_user_update, opts)
      data
    end

    # Update SFTP credentials
    # An endpoint for updating an SFTP user&#39;s password.
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param username [String] Username associated with the SFTP credentials to be updated
    # @param sftp_user_update [SFTPUserUpdate] New password for updating SFTP credentials.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SFTPUserUpdateSuccess, Integer, Hash)>] SFTPUserUpdateSuccess data, response status code and response headers
    def patch_sftp_user_by_username_with_http_info(authorization, username, sftp_user_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CompanyApi.patch_sftp_user_by_username ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CompanyApi.patch_sftp_user_by_username"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling CompanyApi.patch_sftp_user_by_username"
      end
      # verify the required parameter 'sftp_user_update' is set
      if @api_client.config.client_side_validation && sftp_user_update.nil?
        fail ArgumentError, "Missing the required parameter 'sftp_user_update' when calling CompanyApi.patch_sftp_user_by_username"
      end
      # resource path
      local_var_path = '/sftp/{username}'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sftp_user_update)

      # return_type
      return_type = opts[:debug_return_type] || 'SFTPUserUpdateSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CompanyApi.patch_sftp_user_by_username",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#patch_sftp_user_by_username\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create SFTP credentials
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param sftp_user_creds [SFTPUserCreds] A unique username and password to create SFTP credentials.
    # @param [Hash] opts the optional parameters
    # @return [SFTPUserCreateSuccess]
    def post_sftp_credentials(authorization, sftp_user_creds, opts = {})
      data, _status_code, _headers = post_sftp_credentials_with_http_info(authorization, sftp_user_creds, opts)
      data
    end

    # Create SFTP credentials
    # @param authorization [String] Auth token provided by Convictional upon account creation.
    # @param sftp_user_creds [SFTPUserCreds] A unique username and password to create SFTP credentials.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SFTPUserCreateSuccess, Integer, Hash)>] SFTPUserCreateSuccess data, response status code and response headers
    def post_sftp_credentials_with_http_info(authorization, sftp_user_creds, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CompanyApi.post_sftp_credentials ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling CompanyApi.post_sftp_credentials"
      end
      # verify the required parameter 'sftp_user_creds' is set
      if @api_client.config.client_side_validation && sftp_user_creds.nil?
        fail ArgumentError, "Missing the required parameter 'sftp_user_creds' when calling CompanyApi.post_sftp_credentials"
      end
      # resource path
      local_var_path = '/sftp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sftp_user_creds)

      # return_type
      return_type = opts[:debug_return_type] || 'SFTPUserCreateSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CompanyApi.post_sftp_credentials",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyApi#post_sftp_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
