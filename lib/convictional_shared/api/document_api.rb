=begin
#Shared API

#Convictional is the first B2B trade enablement network. This API allows developers to build on our seller and buyer capabilities. This API is unstable, meaning the endpoints could be added, updated or removed without notice. We intend to make backwards incompatible changes in the future, and will make best efforts to notify you in the event of your usage of impacted endpoints. If you plan to build on this API, please contact us for recommendations via support@convictional.com.

The version of the OpenAPI document: v2021-01-01
Contact: support@convictional.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.1

=end

require 'cgi'

module ConvictionalShared
  class DocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get document
    # An endpoint to get a document stored in Convictional's backend via its ID.
    # @param document_id [String] ID of the document to get
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_document(document_id, opts = {})
      data, _status_code, _headers = get_document_with_http_info(document_id, opts)
      data
    end

    # Get document
    # An endpoint to get a document stored in Convictional&#39;s backend via its ID.
    # @param document_id [String] ID of the document to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.get_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling DocumentApi.get_document"
      end
      # resource path
      local_var_path = '/documents/{documentId}'.sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.get_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#get_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List documents
    # An endpoint to list documents relevant to your company stored in our platform (eg. legal agreements, EDI documents, company logos, CSV uploads). Documents are returned in order of those most recently created.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of products to return. (default to 0)
    # @option opts [Integer] :limit The number of products to return. (default to 50)
    # @option opts [String] :tags A comma-separated list of tags that should be included.
    # @return [ResponseMetaData]
    def list_documents(opts = {})
      data, _status_code, _headers = list_documents_with_http_info(opts)
      data
    end

    # List documents
    # An endpoint to list documents relevant to your company stored in our platform (eg. legal agreements, EDI documents, company logos, CSV uploads). Documents are returned in order of those most recently created.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number of products to return.
    # @option opts [Integer] :limit The number of products to return.
    # @option opts [String] :tags A comma-separated list of tags that should be included.
    # @return [Array<(ResponseMetaData, Integer, Hash)>] ResponseMetaData data, response status code and response headers
    def list_documents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.list_documents ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling DocumentApi.list_documents, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 250
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DocumentApi.list_documents, must be smaller than or equal to 250.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling DocumentApi.list_documents, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/documents'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseMetaData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.list_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#list_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload document
    # An endpoint used to upload files to the backend.
    # @param upload_document [UploadDocument] An object containing the document and associated metadata
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def upload_document(upload_document, opts = {})
      data, _status_code, _headers = upload_document_with_http_info(upload_document, opts)
      data
    end

    # Upload document
    # An endpoint used to upload files to the backend.
    # @param upload_document [UploadDocument] An object containing the document and associated metadata
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def upload_document_with_http_info(upload_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocumentApi.upload_document ...'
      end
      # verify the required parameter 'upload_document' is set
      if @api_client.config.client_side_validation && upload_document.nil?
        fail ArgumentError, "Missing the required parameter 'upload_document' when calling DocumentApi.upload_document"
      end
      # resource path
      local_var_path = '/documents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(upload_document)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"DocumentApi.upload_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocumentApi#upload_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
